{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd2b4248",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import imgrvt as rvt\n",
    "import pims\n",
    "import trackpy as tp\n",
    "import pandas as pd\n",
    "from sklearn.gaussian_process import GaussianProcessRegressor\n",
    "from sklearn.gaussian_process.kernels \\\n",
    "    import RBF, WhiteKernel\n",
    "from matplotlib.patches import Circle\n",
    "%config InlineBackend.figure_format='retina'\n",
    "from scipy.signal import find_peaks\n",
    "from scipy.signal import peak_widths\n",
    "plt.rcParams['axes.linewidth'] = 0.5\n",
    "plt.rcParams['font.family'] = 'sans-serif'\n",
    "plt.rcParams['font.sans-serif'] = ['Arial']\n",
    "plt.rc('xtick', labelsize=8)      # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=8)      # fontsize of the tick labels \n",
    "from sympy import *\n",
    "cmap = matplotlib.colormaps['viridis']\n",
    "cmap\n",
    "from colormath.color_objects import XYZColor, sRGBColor\n",
    "from colormath.color_conversions import convert_color\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "import time\n",
    "from sklearn.gaussian_process.kernels import RBF\n",
    "from scipy.interpolate import CubicSpline\n",
    "tab10 = plt.get_cmap(\"tab10\")\n",
    "viridis = plt.get_cmap(\"viridis\")\n",
    "from scipy.interpolate import UnivariateSpline\n",
    "from scipy.interpolate import LSQUnivariateSpline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e20cbadd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read droplet file containing the pixel location, radius and angular variance of each drop\n",
    "df_drops = pd.read_csv('.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1970f6d5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df_drops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7f98680",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the pH file that contains the pH at each pixel as a function of time within the capillary\n",
    "df_ph = pd.read_csv('chamber1_analysis_v3 (nm 24.09.23) pH calibration v3 24.07.08 capillary experiments.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4954dd03",
   "metadata": {},
   "outputs": [],
   "source": [
    "## map pH values from the pH file to individual drops in df_drops based on their pixel location and time label."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71b35d12",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "pH_mapping = df_ph.set_index(['loc','time', 'x'])['pH'].to_dict()\n",
    "\n",
    "def calculate_pH(row, pH_mapping, df_ph):\n",
    "\n",
    "    loc = 1\n",
    "    time_label = row['time_label'] \n",
    "    x_center = round(row['x'])  \n",
    "\n",
    "    pixel = df_ph[(df_ph['loc'] == loc) & (df_ph['time'] == time_label) & (df_ph['x'] == x_center)]\n",
    "    \n",
    "    if not pixel['pH'].empty:\n",
    "        pH_drop = pixel['pH'].values[0]\n",
    "        #print(pH_drop)\n",
    "    else:\n",
    "        pH_drop = np.nan \n",
    "\n",
    "    return pH_drop\n",
    "\n",
    "df_drops['pH'] = df_drops.apply(lambda row: calculate_pH(row, pH_mapping, df_ph), axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a7b0764",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "pH_mapping = df_ph.set_index(['loc','time', 'x'])['pHlow'].to_dict()\n",
    "\n",
    "def calculate_pHlow(row, pH_mapping, df_ph):\n",
    "    loc = 1\n",
    "    time_label = row['time_label'] \n",
    "    x_center = round(row['x']) \n",
    "\n",
    "\n",
    "    pixel = df_ph[(df_ph['loc'] == loc) & (df_ph['time'] == time_label) & (df_ph['x'] == x_center)]\n",
    "    \n",
    "    if not pixel['pHlow'].empty:\n",
    "        pH_low = pixel['pHlow'].values[0]  # Access the first pH value\n",
    "    else:\n",
    "        pH_low = np.nan \n",
    "\n",
    "    return pH_low\n",
    "\n",
    "# Apply the function to create a new \"pH\" column in final_droplets\n",
    "df_drops['pHlow'] = df_drops.apply(lambda row: calculate_pHlow(row, pH_mapping, df_ph), axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "351baba0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "pH_mapping = df_ph.set_index(['loc','time', 'x'])['pHhigh'].to_dict()\n",
    "\n",
    "def calculate_pHhigh(row, pH_mapping, df_ph):\n",
    "    loc = 1\n",
    "    time_label = row['time_label'] \n",
    "    x_center = round(row['x']) \n",
    "\n",
    "    pixel = df_ph[(df_ph['loc'] == loc) & (df_ph['time'] == time_label) & (df_ph['x'] == x_center)]\n",
    "    \n",
    "    if not pixel['pHhigh'].empty:\n",
    "        pH_high = pixel['pHhigh'].values[0]  # Access the first pH value\n",
    "    else:\n",
    "        pH_high = np.nan \n",
    "\n",
    "    return pH_high\n",
    "\n",
    "# Apply the function to create a new \"pH\" column in final_droplets\n",
    "df_drops['pHhigh'] = df_drops.apply(lambda row: calculate_pHhigh(row, pH_mapping, df_ph), axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9497a07",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "delta_mapping = df_ph.set_index(['loc','time', 'x'])['delta'].to_dict()\n",
    "\n",
    "def calculate_delta(row, delta_mapping, df_ph):\n",
    "    loc = 1\n",
    "    time_label = row['time_label'] \n",
    "    x_center = round(row['x'])  \n",
    "\n",
    "    pixel = df_ph[(df_ph['loc'] == loc) & (df_ph['time'] == time_label) & (df_ph['x'] == x_center)]\n",
    "    \n",
    "    if not pixel['delta'].empty:\n",
    "        delta = pixel['delta'].values[0]  # Access the first pH value\n",
    "    else:\n",
    "        delta = np.nan \n",
    "\n",
    "    return delta\n",
    "\n",
    "# Apply the function to create a new \"pH\" column in final_droplets\n",
    "df_drops['delta'] = df_drops.apply(lambda row: calculate_delta(row, delta_mapping, df_ph), axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f70dd06",
   "metadata": {},
   "outputs": [],
   "source": [
    "epsilon_mapping = df_ph.set_index(['loc','time', 'x'])['epsilon'].to_dict()\n",
    "\n",
    "def calculate_epsilon(row, epsilon_mapping, df_ph):\n",
    "    loc = 1\n",
    "    time_label = row['time_label'] \n",
    "    x_center = round(row['x'])  \n",
    "\n",
    "    pixel = df_ph[(df_ph['loc'] == loc) & (df_ph['time'] == time_label) & (df_ph['x'] == x_center)]\n",
    "    \n",
    "    if not pixel['epsilon'].empty:\n",
    "        epsilon = pixel['epsilon'].values[0]  # Access the first pH value\n",
    "    else:\n",
    "        epsilon = np.nan \n",
    "\n",
    "    return epsilon\n",
    "\n",
    "# Apply the function to create a new \"pH\" column in final_droplets\n",
    "df_drops['epsilon'] = df_drops.apply(lambda row: calculate_epsilon(row, epsilon_mapping, df_ph), axis=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71384380",
   "metadata": {},
   "source": [
    "## calculate dpH/dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d617968e",
   "metadata": {},
   "outputs": [],
   "source": [
    "scan_rate = 0.167 # min/frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a3315ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_drops = df_drops.sort_values(by=['time_label', 'particle'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8ac7ae4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_dt(group):\n",
    "    group['dt'] = ((group['time_label'].diff())*scan_rate).fillna(0)\n",
    "    group.loc[group['time_label'] == 0, 'dt'] = scan_rate\n",
    "    return group\n",
    "\n",
    "# Apply the function to calculate time intervals within each particle group\n",
    "df_drops = df_drops.groupby('particle').apply(calculate_dt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5727d0da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate central difference with variable time intervals\n",
    "def central_difference(ph_values, dt):\n",
    "    diff_values = (ph_values.shift(-1) - ph_values.shift(1)) / (dt.shift(-1) + dt.shift(0))\n",
    "    \n",
    "    # Forward differencing for the first frame\n",
    "    diff_values.iloc[0] = (ph_values.iloc[1] - ph_values.iloc[0]) / scan_rate if len(ph_values) > 1 else np.nan\n",
    "    \n",
    "    # Backward differencing for the last frame\n",
    "    diff_values.iloc[-1] = (ph_values.iloc[-1] - ph_values.iloc[-2]) / dt.iloc[-1] if len(ph_values) > 1 else np.nan\n",
    "    return diff_values\n",
    "\n",
    "# Apply central difference calculation to 'pH' grouped by 'particle' with variable time intervals\n",
    "df_drops['dpH/dt'] = df_drops.groupby('particle').apply(lambda x: central_difference(x['pH'], x['dt'])).reset_index(level=0, drop=True)\n",
    "#print(index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa9064ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_drops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe1c4dce",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_drops.to_csv('.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
